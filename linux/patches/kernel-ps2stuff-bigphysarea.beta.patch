diff -uNr linux.orig/Documentation/Configure.help linux.changed/Documentation/Configure.help
--- linux.orig/Documentation/Configure.help	Mon Jan 22 23:30:15 2001
+++ linux.changed/Documentation/Configure.help	Thu Jan 24 18:15:12 2002
@@ -131,6 +131,14 @@
   If you are not sure, say Y; apart from resulting in a 45 KB bigger
   kernel, it won't hurt.
 
+Support for big physical area reservation
+CONFIG_BIGPHYS_AREA
+  Enables kernel support for reserving large areas of physical memory
+  at boot-time for use by certain device drivers (such as video 
+  framegrabbers, etc.) which require it. To use this feature, boot
+  the kernel with the boot-time option 'bigphysarea=nnn' where 
+  'nnn' is the number of pages (a page is usually 4K) to reserve.
+
 Kernel FP software completion
 CONFIG_MATHEMU
   This option is required for IEEE compliant floating point arithmetic
diff -uNr linux.orig/arch/i386/config.in linux.changed/arch/i386/config.in
--- linux.orig/arch/i386/config.in	Sun May 16 22:47:42 1999
+++ linux.changed/arch/i386/config.in	Thu Jan 24 18:15:12 2002
@@ -34,6 +34,10 @@
 fi
 
 bool 'Math emulation' CONFIG_MATH_EMULATION
+if [ "$CONFIG_EXPERIMENTAL" = "y" ]; then
+  # Added by M. Welsh and changed by Pauline Middelink
+  bool 'Support for big physical area reservation' CONFIG_BIGPHYS_AREA
+fi
 bool 'MTRR (Memory Type Range Register) support' CONFIG_MTRR
 bool 'Symmetric multi-processing support' CONFIG_SMP
 endmenu
diff -uNr linux.orig/arch/mips/config.in linux.changed/arch/mips/config.in
--- linux.orig/arch/mips/config.in	Thu Mar 15 21:34:48 2001
+++ linux.changed/arch/mips/config.in	Thu Jan 24 18:34:29 2002
@@ -95,6 +95,10 @@
 if [ "$CONFIG_EXPERIMENTAL" = "y" ]; then
   tristate 'Kernel support for JAVA binaries (obsolete)' CONFIG_BINFMT_JAVA
 fi
+if [ "$CONFIG_EXPERIMENTAL" = "y" ]; then
+  # Added by M. Welsh and changed by Pauline Middelink
+  bool 'Support for big physical area reservation' CONFIG_BIGPHYS_AREA
+fi
 
 bool 'Networking support' CONFIG_NET
 bool 'System V IPC' CONFIG_SYSVIPC
diff -uNr linux.orig/fs/proc/array.c linux.changed/fs/proc/array.c
--- linux.orig/fs/proc/array.c	Wed Jan 17 19:42:10 2001
+++ linux.changed/fs/proc/array.c	Thu Jan 24 18:15:13 2002
@@ -1399,6 +1399,7 @@
 extern int get_pci_list(char *);
 extern int get_md_status (char *);
 extern int get_rtc_status (char *);
+extern int get_bigphysarea_info(char *);
 extern int get_locks_status (char *, char **, off_t, int);
 extern int get_swaparea_info (char *);
 extern int get_hardware_list(char *);
@@ -1485,6 +1486,10 @@
 #ifdef CONFIG_RTC
 		case PROC_RTC:
 			return get_rtc_status(page);
+#endif
+#ifdef CONFIG_BIGPHYS_AREA
+                case PROC_BIGPHYSAREA:
+                       return get_bigphysarea_info(page);
 #endif
 #ifdef CONFIG_SGI_DS1286
 		case PROC_RTC:
diff -uNr linux.orig/fs/proc/root.c linux.changed/fs/proc/root.c
--- linux.orig/fs/proc/root.c	Wed Jan 17 19:42:10 2001
+++ linux.changed/fs/proc/root.c	Thu Jan 24 18:15:13 2002
@@ -665,6 +665,13 @@
 	S_IFREG | S_IRUGO, 1, 0, 0,
 	0, &proc_array_inode_operations
 };
+#ifdef CONFIG_BIGPHYS_AREA
+static struct proc_dir_entry proc_root_bigphysarea = {
+        PROC_BIGPHYSAREA, 11, "bigphysarea",
+	S_IFREG | S_IRUGO, 1, 0, 0,
+	0, &proc_array_inode_operations
+};
+#endif
 #ifdef __powerpc__
 static struct proc_dir_entry proc_root_ppc_htab = {
 	PROC_PPC_HTAB, 8, "ppc_htab",
@@ -760,6 +767,9 @@
 #endif
 #ifdef CONFIG_PROC_DEVICETREE
 	proc_device_tree_init();
+#endif
+#ifdef CONFIG_BIGPHYS_AREA
+	proc_register(&proc_root, &proc_root_bigphysarea);
 #endif
 
 	proc_bus = create_proc_entry("bus", S_IFDIR, 0);
diff -uNr linux.orig/include/linux/bigphysarea.h linux.changed/include/linux/bigphysarea.h
--- linux.orig/include/linux/bigphysarea.h	Wed Dec 31 16:00:00 1969
+++ linux.changed/include/linux/bigphysarea.h	Sat Jan 26 20:53:35 2002
@@ -0,0 +1,33 @@
+/* linux/mm/bigphysarea.h, M. Welsh (mdw@cs.cornell.edu)
+ * Copyright (c) 1996 by Matt Welsh.
+ * Extended by Roger Butenuth (butenuth@uni-paderborn.de), October 1997
+ *
+ * This is a set of routines which allow you to reserve a large (?) 
+ * amount of physical memory at boot-time, which can be allocated/deallocated
+ * by drivers. This memory is intended to be used for devices such as 
+ * video framegrabbers which need a lot of physical RAM (above the amount
+ * allocated by kmalloc). This is by no means efficient or recommended;
+ * to be used only in extreme circumstances.
+ *
+ */
+
+#ifndef __LINUX_BIGPHYSAREA_H 
+#define __LINUX_BIGPHYSAREA_H
+
+#include <linux/types.h>
+
+extern caddr_t bigphysarea;
+
+/* original interface */
+extern void bigphysarea_setup(char *str, int *ints);
+extern unsigned long bigphysarea_init(unsigned long mem_start, unsigned long mem_end);
+extern caddr_t bigphysarea_alloc(int size);
+extern void bigphysarea_free(caddr_t addr, int size);
+
+/* new interface */
+extern caddr_t bigphysarea_alloc_pages(int count, int align, int priority);
+extern void    bigphysarea_free_pages(caddr_t base);
+
+extern void bigphysarea_free_all_pages(void);
+
+#endif __LINUX_BIGPHYSAREA_H
diff -uNr linux.orig/include/linux/proc_fs.h linux.changed/include/linux/proc_fs.h
--- linux.orig/include/linux/proc_fs.h	Wed Apr 18 19:01:36 2001
+++ linux.changed/include/linux/proc_fs.h	Thu Jan 24 18:19:30 2002
@@ -52,6 +52,9 @@
 	PROC_STRAM,
 	PROC_SOUND,
 	PROC_MTRR, /* whether enabled or not */
+#ifdef CONFIG_BIGPHYS_AREA
+	PROC_BIGPHYSAREA,
+#endif
 	PROC_FS,
 	PROC_PS2SYSCONF,
 };
diff -uNr linux.orig/init/main.c linux.changed/init/main.c
--- linux.orig/init/main.c	Fri Dec  8 00:48:43 2000
+++ linux.changed/init/main.c	Thu Jan 24 18:23:25 2002
@@ -42,6 +42,10 @@
 #  include <asm/mtrr.h>
 #endif
 
+#ifdef CONFIG_BIGPHYS_AREA
+#  include <linux/bigphysarea.h>
+#endif
+
 #ifdef CONFIG_APM
 #include <linux/apm_bios.h>
 #endif
@@ -257,6 +261,9 @@
 #ifdef CONFIG_ISDN_DRV_PCBIT
 extern void pcbit_setup(char *str, int *ints);
 #endif
+#ifdef CONFIG_BIGPHYS_AREA
+extern void bigphysarea_setup(char *str, int *ints);
+#endif
 
 #ifdef CONFIG_ATARIMOUSE
 extern void atari_mouse_setup (char *str, int *ints);
@@ -889,6 +896,9 @@
 	{ "ps2_rtver=", dummy_setup },
 	{ "ps2_rcparams=", dummy_setup },
 #endif
+#ifdef CONFIG_BIGPHYS_AREA
+        { "bigphysarea=", bigphysarea_setup },
+#endif
 	{ 0, 0 }
 };
 
@@ -1189,6 +1199,11 @@
 	set_debug_traps();
 	/* breakpoint(); */	/* execute a BREAK insn */
 #endif
+
+#ifdef CONFIG_BIGPHYS_AREA
+	memory_start = bigphysarea_init(memory_start,memory_end);
+#endif
+
 	memory_start = kmem_cache_init(memory_start, memory_end);
 	sti();
 	calibrate_delay();
diff -uNr linux.orig/kernel/ksyms.c linux.changed/kernel/ksyms.c
--- linux.orig/kernel/ksyms.c	Wed Apr 18 19:01:37 2001
+++ linux.changed/kernel/ksyms.c	Sat Jan 26 21:15:43 2002
@@ -52,6 +52,9 @@
 #if !defined(CONFIG_NFSD) && defined(CONFIG_NFSD_MODULE)
 extern int (*do_nfsservctl)(int, void *, void *);
 #endif
+#ifdef CONFIG_BIGPHYS_AREA
+#include <linux/bigphysarea.h>
+#endif
 
 extern void *sys_call_table;
 
@@ -112,6 +115,15 @@
 EXPORT_SYMBOL(high_memory);
 EXPORT_SYMBOL(update_vm_cache);
 EXPORT_SYMBOL(vmtruncate);
+
+#ifdef CONFIG_BIGPHYS_AREA
+EXPORT_SYMBOL(bigphysarea_alloc);
+EXPORT_SYMBOL(bigphysarea_free);
+EXPORT_SYMBOL(bigphysarea_alloc_pages);
+EXPORT_SYMBOL(bigphysarea_free_pages);
+EXPORT_SYMBOL(bigphysarea_free_all_pages);
+EXPORT_SYMBOL(bigphysarea);
+#endif
 
 /* filesystem internal functions */
 EXPORT_SYMBOL(in_group_p);
diff -uNr linux.orig/mm/Makefile linux.changed/mm/Makefile
--- linux.orig/mm/Makefile	Sun May 16 22:48:03 1999
+++ linux.changed/mm/Makefile	Thu Jan 24 18:15:13 2002
@@ -12,4 +12,8 @@
 	    vmalloc.o slab.o \
 	    swap.o vmscan.o page_io.o page_alloc.o swap_state.o swapfile.o
 
+ifeq ($(CONFIG_BIGPHYS_AREA),y)
+ O_OBJS += bigphysarea.o
+endif
+
 include $(TOPDIR)/Rules.make
diff -uNr linux.orig/mm/bigphysarea.c linux.changed/mm/bigphysarea.c
--- linux.orig/mm/bigphysarea.c	Wed Dec 31 16:00:00 1969
+++ linux.changed/mm/bigphysarea.c	Sat Jan 26 21:45:21 2002
@@ -0,0 +1,317 @@
+/* linux/mm/bigphysarea.c, M. Welsh (mdw@cs.cornell.edu)
+ * Copyright (c) 1996 by Matt Welsh.
+ * Extended by Roger Butenuth (butenuth@uni-paderborn.de), October 1997
+ *
+ * This is a set of routines which allow you to reserve a large (?) 
+ * amount of physical memory at boot-time, which can be allocated/deallocated
+ * by drivers. This memory is intended to be used for devices such as 
+ * video framegrabbers which need a lot of physical RAM (above the amount
+ * allocated by kmalloc). This is by no means efficient or recommended;
+ * to be used only in extreme circumstances.
+ *
+ *   This program is free software; you can redistribute it and/or modify
+ *   it under the terms of the GNU General Public License as published by
+ *   the Free Software Foundation; either version 2 of the License, or
+ *   (at your option) any later version.
+ * 
+ *   This program is distributed in the hope that it will be useful,
+ *   but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ *   GNU General Public License for more details.
+ *
+ *   You should have received a copy of the GNU General Public License
+ *   along with this program; if not, write to the Free Software
+ *   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
+ *
+ */
+
+#include <linux/config.h>
+#include <linux/ptrace.h>
+#include <linux/types.h>
+#include <linux/kernel.h>
+#include <linux/bios32.h>
+#include <linux/pci.h>
+#include <linux/string.h>
+#include <linux/mm.h>
+#include <linux/errno.h>
+#include <linux/malloc.h>
+#include <linux/bigphysarea.h>
+
+typedef struct range_struct {
+  struct range_struct *next;
+  caddr_t base;			/* base of allocated block */
+  size_t  size;			/* size in bytes */
+} range_t;
+
+static int bigphysarea_pages = 0;
+static int init_level = 0;
+/*
+ * 0: nothing initialized
+ * 1: bigphysarea_pages initialized
+ * 2: free list initialized
+ */
+static range_t *free_list = NULL;
+static range_t *used_list = NULL;
+
+caddr_t bigphysarea;
+
+void bigphysarea_setup(char *str, int *ints)
+{
+	if (ints[0] != 1) {
+		printk("bigphysarea_setup: Usage: bigphysarea=<number of pages>\n");
+	} else {
+		bigphysarea_pages = ints[1];
+	}
+}
+
+unsigned long bigphysarea_init(unsigned long mem_start, unsigned long mem_end) {
+	if (bigphysarea_pages == 0)
+		return mem_start;
+
+	bigphysarea = (caddr_t)((mem_start + (PAGE_SIZE - 1)) &
+				~(PAGE_SIZE - 1));
+	
+	init_level = 1;
+
+	printk("bigphysarea: Allocated %d pages at 0x%08lx.\n",
+	       bigphysarea_pages, (unsigned long)bigphysarea);
+
+	return (unsigned long)(bigphysarea + (bigphysarea_pages * PAGE_SIZE));
+}
+
+/*
+ * When we have pages but don't have a freelist, put all pages in
+ * one free list entry. Return 0 on success, 1 on error.
+ */
+static int init2(int priority)
+{
+	if (init_level == 1) {
+		free_list = kmalloc(sizeof(range_t), priority);
+		if (free_list != NULL) {
+			free_list->next = NULL;
+			free_list->base = bigphysarea;
+			free_list->size = bigphysarea_pages * PAGE_SIZE;
+			init_level = 2;
+			return 0;
+		} else 
+			return 1;
+	} else
+		return 1;
+}
+
+
+/*
+ * Allocate `count' pages from the big physical area. Pages are aligned to
+ * a multiple of `align'. `priority' has the same meaning in kmalloc, it
+ * is needed for management information.
+ * This function may not be called from an interrupt!
+ */
+caddr_t bigphysarea_alloc_pages(int count, int align, int priority)
+{
+	range_t *range, **range_ptr, *new_range, *align_range;
+	caddr_t aligned_base;
+
+	if (init_level < 2)
+		if (init2(priority))
+			return 0;
+	new_range   = NULL;
+	align_range = NULL;
+
+	if (align == 0)
+		align = PAGE_SIZE;
+	else
+		align = align * PAGE_SIZE;
+	/*
+	 * Search a free block which is large enough, even with alignment.
+	 */
+	range_ptr = &free_list;
+	while (*range_ptr != NULL) {
+		range = *range_ptr;
+		aligned_base =
+		  (caddr_t)((((long)range->base + align - 1) / align) * align);
+		if (aligned_base + count * PAGE_SIZE <= 
+		    range->base + range->size)
+			break;
+	     range_ptr = &range->next;
+	}
+	if (*range_ptr == NULL)
+		return 0;
+	range = *range_ptr;
+	/*
+	 * When we have to align, the pages needed for alignment can
+	 * be put back to the free pool.
+	 * We check here if we need a second range data structure later
+	 * and allocate it now, so that we don't have to check for a
+	 * failed kmalloc later.
+	 */
+	if (aligned_base - range->base + count * PAGE_SIZE < range->size) {
+		new_range = kmalloc(sizeof(range_t), priority);
+		if (new_range == NULL)
+			return NULL;
+	}
+	if (aligned_base != range->base) {
+		align_range = kmalloc(sizeof(range_t), priority);
+		if (align_range == NULL) {
+			if (new_range != NULL)
+				kfree(new_range);
+			return NULL;
+		}
+		align_range->base = range->base;
+		align_range->size = aligned_base - range->base;
+		range->base = aligned_base;
+		range->size -= align_range->size;
+		align_range->next = range;
+		*range_ptr = align_range;
+		range_ptr = &align_range->next;
+	}
+	if (new_range != NULL) {
+		/*
+		 * Range is larger than needed, create a new list element for
+		 * the used list and shrink the element in the free list.
+		 */
+		new_range->base        = range->base;
+		new_range->size        = count * PAGE_SIZE;
+		range->base = new_range->base + new_range->size;
+		range->size = range->size - new_range->size;
+	} else {
+		/*
+		 * Range fits perfectly, remove it from free list.
+		 */
+		*range_ptr = range->next;
+		new_range = range;
+	}
+	/*
+	 * Insert block into used list
+	 */
+	new_range->next = used_list;
+	used_list = new_range;
+
+	return new_range->base;
+}
+
+/*
+ * Free pages allocated with `bigphysarea_alloc_pages'. `base' must be an
+ * address returned by `bigphysarea_alloc_pages'.
+ * This function my not be called from an interrupt!
+ */
+void bigphysarea_free_pages(caddr_t base)
+{
+	range_t *prev, *next, *range, **range_ptr;
+  
+	/*
+	 * Search the block in the used list.
+	 */
+	for (range_ptr = &used_list;
+	     *range_ptr != NULL;
+	     range_ptr = &(*range_ptr)->next)
+		if ((*range_ptr)->base == base)
+			break;
+	if (*range_ptr == NULL) {
+		printk("bigphysarea_free_pages(0x%08x), not allocated!\n",
+		       (unsigned)base);
+		return;
+	}
+	range = *range_ptr;
+	/*
+	 * Remove range from the used list:
+	 */
+	*range_ptr = (*range_ptr)->next;
+	/*
+	 * The free-list is sorted by address, search insertion point
+	 * and insert block in free list.
+	 */
+	for (range_ptr = &free_list, prev = NULL;
+	     *range_ptr != NULL;
+	     prev = *range_ptr, range_ptr = &(*range_ptr)->next)
+		if ((*range_ptr)->base >= base)
+			break;
+	range->next  = *range_ptr;
+	*range_ptr   = range;
+	/*
+	 * Concatenate free range with neighbors, if possible.
+	 * Try for upper neighbor (next in list) first, then
+	 * for lower neighbor (predecessor in list).
+	 */
+	if (range->next != NULL &&
+	    range->base + range->size == range->next->base) {
+		next = range->next;
+		range->size += range->next->size;
+		range->next = next->next;
+		kfree(next);
+	}
+	if (prev != NULL &&
+	    prev->base + prev->size == range->base) {
+		prev->size += prev->next->size;
+		prev->next = range->next;
+		kfree(range);
+	}
+}
+
+caddr_t bigphysarea_alloc(int size)
+{
+	int pages = (size + PAGE_SIZE - 1) / PAGE_SIZE;
+
+	return bigphysarea_alloc_pages(pages, 1, GFP_KERNEL);
+}
+
+void bigphysarea_free(caddr_t addr, int size)
+{
+	(void)size;
+	bigphysarea_free_pages(addr);
+}
+
+void bigphysarea_free_all_pages(void)
+{
+	range_t *ptr, *next_ptr;
+
+	while ( used_list != NULL )
+	  bigphysarea_free_pages( used_list->base );
+}
+
+int get_bigphysarea_info(char *buf)
+{
+	char    *p = buf;
+	range_t *ptr;
+	int     free_count, free_total, free_max;
+	int     used_count, used_total, used_max;
+
+	if (init_level == 1)
+	  init2(GFP_KERNEL);
+
+	free_count = 0;
+	free_total = 0;
+	free_max   = 0;
+	for (ptr = free_list; ptr != NULL; ptr = ptr->next) {
+		free_count++;
+		free_total += ptr->size;
+		if (ptr->size > free_max)
+			free_max = ptr->size;
+	}
+
+	used_count = 0;
+	used_total = 0;
+	used_max   = 0;
+	for (ptr = used_list; ptr != NULL; ptr = ptr->next) {
+		used_count++;
+		used_total += ptr->size;
+		if (ptr->size > used_max)
+			used_max = ptr->size;
+	}
+
+	if (bigphysarea_pages == 0) {
+		p += sprintf(p, "No big physical area allocated!\n");
+		return  p - buf;
+	}
+	  
+	p += sprintf(p, "Big physical area, size %ld kB\n",
+		     bigphysarea_pages * PAGE_SIZE / 1024);
+	p += sprintf(p, "                       free list:             used list:\n");
+	p += sprintf(p, "number of blocks:      %8d               %8d\n",
+		     free_count, used_count);
+	p += sprintf(p, "size of largest block: %8d kB            %8d kB\n",
+		     free_max / 1024, used_max / 1024);
+	p += sprintf(p, "total:                 %8d kB            %8d kB\n",
+		     free_total / 1024, used_total /1024);
+
+	return  p - buf;
+}
