diff -ur gcc-2.95.2.orig/gcc/config/mips/mips.md gcc-2.95.2.new/gcc/config/mips/mips.md
--- gcc-2.95.2.orig/gcc/config/mips/mips.md	Thu Feb 14 11:14:38 2002
+++ gcc-2.95.2.new/gcc/config/mips/mips.md	Thu Feb 14 11:12:35 2002
@@ -6394,7 +6394,7 @@
 
 (define_insn "movsf_internal2"
   [(set (match_operand:SF 0 "nonimmediate_operand" "=d,d,d,R,m")
-	(match_operand:SF 1 "general_operand" "      Gd,R,Fm,d,d"))]
+	(match_operand:SF 1 "general_operand" "Gd,R,Fm,d,d"))]
   "TARGET_SOFT_FLOAT && !TARGET_MIPS16
    && (register_operand (operands[0], SFmode)
        || register_operand (operands[1], SFmode)
diff -ur gcc-2.95.2.orig/gcc/cp/lex.c gcc-2.95.2.new/gcc/cp/lex.c
--- gcc-2.95.2.orig/gcc/cp/lex.c	Wed Aug 11 11:36:44 1999
+++ gcc-2.95.2.new/gcc/cp/lex.c	Thu Feb 14 11:12:06 2002
@@ -3626,23 +3626,35 @@
 	p = token_buffer;
 	*p++ = c;
 
-	if (c == '0')
-	  {
+	if (c == '0')  		// leading zero
+	{
 	    *p++ = (c = getch ());
-	    if ((c == 'x') || (c == 'X'))
-	      {
+	    if ((c == 'x') || (c == 'X'))     // next char is x - so hex
+	    {
 		base = 16;
 		*p++ = (c = getch ());
-	      }
-	    /* Leading 0 forces octal unless the 0 is the only digit.  */
-	    else if (c >= '0' && c <= '9')
-	      {
-		base = 8;
-		numdigits++;
-	      }
-	    else
-	      numdigits++;
-	  }
+	    }
+	    else	   // not hex..
+	    {
+	  	if ((c == 'b') || (c == 'B'))  	// hey, 0b--- means binary
+	  	{
+			base = 2;
+			*p++ = (c = getch ());
+	      	}
+		else
+	     	{
+	    	 	if (c >= '0' && c <= '9')
+	     		{
+		       		base = 8;
+		       		numdigits++;   // it's octal.. so count this char too 
+			}
+			else
+			{
+			 	numdigits++;  	// well - count this char too
+			}
+		}
+	    }
+	}
 
 	/* Read all the digits-and-decimal-points.  */
 
diff -ur gcc-2.95.2.orig/gcc/cp/semantics.c gcc-2.95.2.new/gcc/cp/semantics.c
--- gcc-2.95.2.orig/gcc/cp/semantics.c	Sat Jun 19 16:54:52 1999
+++ gcc-2.95.2.new/gcc/cp/semantics.c	Thu Feb 14 11:12:14 2002
@@ -730,9 +730,27 @@
 
   if (processing_template_decl)
     {
-      tree r = build_min_nt (ASM_STMT, cv_qualifier, string,
-			     output_operands, input_operands,
-			     clobbers);
+      tree r;
+      /* build_min_nt builds an expression in permanent storage,
+	 but it doesn't copy the asm text referenced by
+	 TREE_STRING_POINTER(string).  If the asm was created by
+	 concatenating adjacent strings above with 'combine_strings'
+	 it is not on permanent_obstack and hence might be freed
+	 before it is written out when the template function is
+	 instanciated.  SO, copy it here to permanent storage if not
+	 already there.. */
+      if ( ! TREE_PERMANENT(string) ) {
+	int str_length = TREE_STRING_LENGTH(string);
+	char* old_string = TREE_STRING_POINTER(string);
+	char* new_perm_string = permalloc( str_length );
+	/* all the wide char stuff has been taken care of.. str_length is
+	   # of bytes */
+	memcpy( new_perm_string, old_string, str_length );
+	TREE_STRING_POINTER(string) = new_perm_string;
+      }
+      r = build_min_nt (ASM_STMT, cv_qualifier, string,
+			output_operands, input_operands,
+			clobbers);
       add_tree (r);
     }
   else
diff -ur gcc-2.95.2.orig/gcc/final.c gcc-2.95.2.new/gcc/final.c
--- gcc-2.95.2.orig/gcc/final.c	Thu Feb 14 11:14:25 2002
+++ gcc-2.95.2.new/gcc/final.c	Thu Feb 14 11:10:57 2002
@@ -2545,6 +2545,8 @@
 	    /* Get out the operand values.  */
 	    string = decode_asm_operands (body, ops, NULL_PTR,
 					  NULL_PTR, NULL_PTR);
+					  
+		check_asm_operands( body );
 	    /* Inhibit aborts on what would otherwise be compiler bugs.  */
 	    insn_noperands = noperands;
 	    this_is_asm_operands = insn;
@@ -3423,9 +3425,25 @@
 	break;
 #endif
 
+
       case '%':
+
+	if (*p == 'A')
+	{
+		p++;
+		c = atoi(p);
+	    if (! (*p >= '0' && *p <= '9'))
+	      output_operand_lossage ("alternative value missing");
+		else if ( c > 9 )
+	      output_operand_lossage ("alternative value too large");
+		else
+		{
+		  fputc( (which_alternative == c)?'1':'0', asm_out_file );
+		}
+        p++;
+    }
 	/* %% outputs a single %.  */
-	if (*p == '%')
+	else if (*p == '%')
 	  {
 	    p++;
 	    putc (c, asm_out_file);
diff -ur gcc-2.95.2.orig/gcc/local-alloc.c gcc-2.95.2.new/gcc/local-alloc.c
--- gcc-2.95.2.orig/gcc/local-alloc.c	Wed Oct 20 21:59:40 1999
+++ gcc-2.95.2.new/gcc/local-alloc.c	Thu Feb 14 11:12:25 2002
@@ -2212,7 +2212,9 @@
   int reg_allowed = 0;
   int num_matching_alts = 0;
 
-  while ((c = *p++))
+  while ((c = *p++)
+	 && (c != ' ')
+	 && (c != '\t'))
     switch (c)
       {
       case '=':  case '+':  case '?':
diff -ur gcc-2.95.2.orig/gcc/recog.c gcc-2.95.2.new/gcc/recog.c
--- gcc-2.95.2.orig/gcc/recog.c	Sat Apr 10 15:16:29 1999
+++ gcc-2.95.2.new/gcc/recog.c	Thu Feb 14 11:12:25 2002
@@ -1567,7 +1567,9 @@
   if (reload_completed)
     abort ();
 
-  while (*constraint)
+  while (*constraint != ' '
+	 && *constraint != '\t'
+	 && *constraint != '\0')
     {
       switch (*constraint++)
 	{
@@ -2123,6 +2125,10 @@
 		while (c != ',' && c != '\0');
 	      if (c == ',' || c == '\0')
 		break;
+	      /* stop if we've hit whitespace -- what follows is a name
+		 for this operand, not a constraint. */
+	      if (c == ' ' || c == '\t' )
+		break;
 
 	      switch (c)
 		{
@@ -2281,7 +2287,9 @@
 	  if (*p == 0 || *p == ',')
 	    win = 1;
 
-	  while (*p && (c = *p++) != ',')
+	  while (*p && (c = *p++) != ',') {
+	    if ( c == ' ' || c == '\t' )
+	      break;
 	    switch (c)
 	      {
 	      case '?':
@@ -2515,6 +2523,7 @@
 					     offset, mode)))
 		  win = 1;
 	      }
+	  }
 
 	  constraints[opno] = p;
 	  /* If this operand did not win somehow,
diff -ur gcc-2.95.2.orig/gcc/regclass.c gcc-2.95.2.new/gcc/regclass.c
--- gcc-2.95.2.orig/gcc/regclass.c	Tue Jul 13 17:59:20 1999
+++ gcc-2.95.2.new/gcc/regclass.c	Thu Feb 14 11:12:25 2002
@@ -1259,7 +1259,7 @@
 	     any of the constraints.  Collect the valid register classes
 	     and see if this operand accepts memory.  */
 
-	  while (*p && (c = *p++) != ',')
+	  while (*p && (c = *p++) != ',' && (c != ' ') && (c != '\t'))
 	    switch (c)
 	      {
 	      case '*':
diff -ur gcc-2.95.2.orig/gcc/reload.c gcc-2.95.2.new/gcc/reload.c
--- gcc-2.95.2.orig/gcc/reload.c	Wed Jul 14 15:29:48 1999
+++ gcc-2.95.2.new/gcc/reload.c	Thu Feb 14 11:12:25 2002
@@ -2552,7 +2552,7 @@
       /* Scan this operand's constraint to see if it is an output operand, 
 	 an in-out operand, is commutative, or should match another.  */
 
-      while ((c = *p++))
+      while ((c = *p++) && (c != ' ') && (c != '\t'))
 	{
 	  if (c == '=')
 	    modified[i] = RELOAD_WRITE;
@@ -2904,7 +2904,7 @@
 	     or set WINREG if this operand could fit after reloads
 	     provided the constraint allows some registers.  */
 
-	  while (*p && (c = *p++) != ',')
+	  while (*p && (c = *p++) != ',' && (c != ' ') && (c != '\t'))
 	    switch (c)
 	      {
 	      case '=':
@@ -4344,7 +4344,7 @@
     }
   /* Scan the requested alternative for 'm' or 'o'.
      If one of them is present, this alternative accepts memory constants.  */
-  while ((c = *constraint++) && c != ',' && c != '#')
+  while ((c = *constraint++) && c != ',' && c != '#' && c != ' ' && c != '\t' )
     if (c == 'm' || c == 'o')
       return 1;
   return 0;
diff -ur gcc-2.95.2.orig/gcc/reload1.c gcc-2.95.2.new/gcc/reload1.c
--- gcc-2.95.2.orig/gcc/reload1.c	Thu Feb 14 11:14:39 2002
+++ gcc-2.95.2.new/gcc/reload1.c	Thu Feb 14 11:12:25 2002
@@ -1287,6 +1287,9 @@
 	    {
 	      char c = *p++;
 
+	      if (c == ' ' || c == '\t')
+		break;
+
 	      if (c == '\0' || c == ',' || c == '#')
 		{
 		  /* End of one alternative - mark the regs in the current
@@ -9266,6 +9269,9 @@
 	    {
 	      char c = *p++;
 	      
+	      if (c == ' ' || c == '\t')
+		break;
+
 	      switch (c)
 		{
 		case '=':  case '+':  case '?':
diff -ur gcc-2.95.2.orig/gcc/stmt.c gcc-2.95.2.new/gcc/stmt.c
--- gcc-2.95.2.orig/gcc/stmt.c	Sun May 30 06:19:44 1999
+++ gcc-2.95.2.new/gcc/stmt.c	Thu Feb 14 11:12:25 2002
@@ -1111,6 +1111,192 @@
   last_expr_type = 0;
 }
 
+const char*
+get_asm_operand_name( const char* constraint )
+{
+   char* name = strchr(constraint, ' ');
+   if ( name != NULL ) {
+      /* find the name.. */
+      while( *name == ' ' || *name == '\t' ) name++;
+      if ( *name == '\0' )
+	 error("Syntax error!  A name must follow whitespace in a constraint!");
+   }
+}
+
+typedef struct {
+      const char* name;
+      char value[5];
+      int num_occurrences;
+      const char* next_sub;
+} name_def_entry;
+
+void
+find_asm_name_occurrences( name_def_entry* definition, const char* asm_text )
+{
+   static const char* max_char_ptr = (char*)0xffffffff;
+   int is_first_sub = 1;
+   const char* cursor;
+
+   /* count the number of times the name occurs in the asm */
+   definition->next_sub = (char*)max_char_ptr;
+   definition->num_occurrences = 0;
+   cursor = asm_text;
+   while ( cursor = strstr(cursor, definition->name) ) {
+      if ( is_first_sub ) {
+	 definition->next_sub = cursor;
+	 is_first_sub = 0;
+      }
+      definition->num_occurrences++;
+      cursor += strlen( definition->name );
+   }
+   if ( definition->num_occurrences == 0 )
+      warning("'%s' was not found in the asm text!", definition->name);
+}
+
+char*
+substitute_asm_operand_names( name_def_entry* name_defs, int num_definitions,
+			      const char* old_asm_text )
+{
+   static const char* max_char_ptr = (char*)0xffffffff;
+   char *new_asm_text, *new_cursor;
+   const char *old_cursor, *next_substitution;
+   name_def_entry* next_def_to_sub;
+   int asm_text_length = strlen( old_asm_text ) + 1; /* +1 for '\0' */
+
+   /* get the length of the new asm string */
+   int i;
+   int new_asm_text_length = asm_text_length;
+   for ( i = 0; i < num_definitions; i++ ) {
+      new_asm_text_length +=
+	 ( (strlen(name_defs[i].value) - strlen(name_defs[i].name))
+	   * name_defs[i].num_occurrences );
+   }
+   if ( new_asm_text_length < 0)
+      error( "something has gone horribly wrong "
+	     "while trying to substitute asm operand names..." );
+
+   new_asm_text = (char*)malloc( new_asm_text_length * sizeof(char) );
+
+   /* now copy the old asm string to the new while substituting. strategy is as follows: */
+   /* 1. find the next substitution for each definition (done above) */
+   /* 2. find the first of the substitutions */
+   /* 3. copy up to the first sub and substitute */
+   /* 4. find the next substitution of definition we just used */
+   /* 5. loop to 2 */
+   old_cursor = old_asm_text;
+   new_cursor = new_asm_text;
+   while ( 1 ) {
+      /* find the next substitution */
+      next_substitution = (char*)max_char_ptr;
+      for ( i = 0; i < num_definitions; i++ ) {
+	 if ( name_defs[i].next_sub < next_substitution ) {
+	    next_substitution = name_defs[i].next_sub;
+	    next_def_to_sub = &name_defs[i];
+	 }
+      }
+      /* are we finished? */
+      if ( next_substitution == (char*)max_char_ptr ) break;
+
+      if ( old_cursor > next_substitution )
+	 error("error while trying to substitute register names in `asm' text; are you sure "
+	       "one of your names isn't a substring of another?" );
+
+      /* copy up to the next sub */
+      while ( *old_cursor && old_cursor != next_substitution )
+	 *new_cursor++ = *old_cursor++;
+
+      /* substitute */
+      strcpy( new_cursor, next_def_to_sub->value );
+      new_cursor += strlen(next_def_to_sub->value);
+      old_cursor += strlen(next_def_to_sub->name);
+
+      /* now update the def we just substituted */
+      next_def_to_sub->next_sub = strstr( old_cursor, next_def_to_sub->name );
+      if ( next_def_to_sub->next_sub == NULL )
+	 next_def_to_sub->next_sub = (char*)max_char_ptr;
+   }
+
+   /* copy the rest of the asm (after the last sub) */
+   while ( *old_cursor ) *new_cursor++ = *old_cursor++;
+   *new_cursor = '\0';
+
+   return new_asm_text;
+}
+
+#define MAX_ASM_NAME_DEFS 20
+
+char*
+find_and_subst_asm_op_names( asm_text, inputs, outputs )
+  const char* asm_text;
+  tree inputs, outputs;
+{
+  int num_defs = 0, num_substitutions = 0;
+
+  /* a table to hold name definitions */
+  name_def_entry name_defs[MAX_ASM_NAME_DEFS], *cur_def = &name_defs[0];
+
+  int asm_text_length = strlen(asm_text) + 1;
+  char *new_asm_text = (char*)asm_text;
+  int new_asm_text_length = asm_text_length;
+  int cur_operand_num = 0;
+
+  tree cur_node;
+
+  /* first, check the outputs for name definitions */
+  for (cur_node = outputs; cur_node; cur_node = TREE_CHAIN(cur_node) ) {
+    char* constraint = TREE_STRING_POINTER (TREE_PURPOSE (cur_node));
+    int constraint_length = TREE_STRING_LENGTH (TREE_PURPOSE (cur_node)) - 1;
+    const char* name;
+
+    /* does this operand have a name associated with it? */
+    if ( constraint_length > 0
+	 && (name = get_asm_operand_name(constraint)) ) {
+      num_defs++;
+      cur_def->name = name;
+	 
+      /* set the value of this name to be '%<operand number>' */
+      sprintf(cur_def->value, "%%%d", cur_operand_num);
+
+      find_asm_name_occurrences( cur_def, asm_text );
+      num_substitutions += cur_def->num_occurrences;
+
+      cur_def++;
+    }
+
+    cur_operand_num++;
+  }
+
+  /* now check the inputs for name definitions */
+  for (cur_node = inputs; cur_node; cur_node = TREE_CHAIN(cur_node) ) {
+    char* constraint = TREE_STRING_POINTER (TREE_PURPOSE (cur_node));
+    int constraint_length = TREE_STRING_LENGTH (TREE_PURPOSE (cur_node)) - 1;
+    const char *name;
+
+    /* does this operand have a name associated with it? */
+    if ( constraint_length > 0
+	 && (name = get_asm_operand_name(constraint)) ) {
+      num_defs++;
+      cur_def->name = name;
+
+      /* set the value of this name to be '%<operand number>' */
+      sprintf(cur_def->value, "%%%d", cur_operand_num);
+
+      find_asm_name_occurrences( cur_def, asm_text );
+      num_substitutions += cur_def->num_occurrences;
+
+      cur_def++;
+    }
+
+    cur_operand_num++;
+  }
+
+  /* now we need to perform the substitutions */
+  if ( num_defs > 0 && num_substitutions > 0 )
+    new_asm_text = substitute_asm_operand_names( name_defs, num_defs, asm_text );
+
+  return new_asm_text;
+}
+
 /* Generate RTL for an asm statement with arguments.
    STRING is the instruction template.
    OUTPUTS is a list of output arguments (lvalues); INPUTS a list of inputs.
@@ -1150,6 +1336,8 @@
   /* The insn we have emitted.  */
   rtx insn;
 
+  char *new_asm_string = find_and_subst_asm_op_names( TREE_STRING_POINTER(string), inputs, outputs );
+
   /* An ASM with no outputs needs to be treated as volatile, for now.  */
   if (noutputs == 0)
     vol = 1;
@@ -1226,8 +1414,10 @@
 	 the worst that happens if we get it wrong is we issue an error
 	 message.  */
 
-      c_len = TREE_STRING_LENGTH (TREE_PURPOSE (tail)) - 1;
       constraint = TREE_STRING_POINTER (TREE_PURPOSE (tail));
+      c_len = TREE_STRING_LENGTH (TREE_PURPOSE (tail)) - 1;
+      /* subtract the name of this constraint off of c_len */
+      c_len = (p = strchr(constraint, ' ')) ? (int)(p - constraint) : c_len;
 
       /* Allow the `=' or `+' to not be at the beginning of the string,
 	 since it wasn't explicitly documented that way, and there is a
@@ -1374,8 +1564,12 @@
   argvec = rtvec_alloc (ninputs);
   constraints = rtvec_alloc (ninputs);
 
+  /* new_asm_string will be the same as TREE_STRING_POINTER(string) if
+     there were no substitutions performed in parse_name_definitions,
+     otherwise it will point to a new string generated for this function
+     (which is necessary for templates) */
   body = gen_rtx_ASM_OPERANDS (VOIDmode,
-			       TREE_STRING_POINTER (string), "", 0, argvec,
+			       new_asm_string, "", 0, argvec,
 			       constraints, filename, line);
 
   MEM_VOLATILE_P (body) = vol;
@@ -1388,7 +1582,7 @@
     {
       int j;
       int allows_reg = 0, allows_mem = 0;
-      char *constraint, *orig_constraint;
+      char *constraint, *orig_constraint, *p;
       int c_len;
       rtx op;
 
@@ -1406,9 +1600,11 @@
 	  return;
 	}
 
-      c_len = TREE_STRING_LENGTH (TREE_PURPOSE (tail)) - 1;
       constraint = TREE_STRING_POINTER (TREE_PURPOSE (tail));
       orig_constraint = constraint;
+      c_len = TREE_STRING_LENGTH (TREE_PURPOSE (tail)) - 1;
+      /* subtract the name of this constraint off of c_len */
+      c_len = (p = strchr(constraint, ' ')) ? (int)(p - constraint) : c_len;
 
       /* Make sure constraint has neither `=', `+', nor '&'.  */
 
@@ -1471,6 +1667,8 @@
 	
 		c_len = TREE_STRING_LENGTH (TREE_PURPOSE (o)) - 1;
 		constraint = TREE_STRING_POINTER (TREE_PURPOSE (o));
+		/* subtract the name of this constraint off of c_len */
+		c_len = (p = strchr(constraint, ' ')) ? (int)(p - constraint) : c_len;
 		j = 0;
 		break;
 	      }
@@ -1584,7 +1782,7 @@
 	    = gen_rtx_SET (VOIDmode,
 			   output_rtx[i],
 			   gen_rtx_ASM_OPERANDS (VOIDmode,
-						 TREE_STRING_POINTER (string),
+						 new_asm_string,
 						 TREE_STRING_POINTER (TREE_PURPOSE (tail)),
 						 i, argvec, constraints,
 						 filename, line));
