diff -ur gcc-3.0.3-orig/gcc/c-lex.c gcc-3.0.3/gcc/c-lex.c
--- gcc-3.0.3-orig/gcc/c-lex.c	Tue May 22 04:08:30 2001
+++ gcc-3.0.3/gcc/c-lex.c	Fri Jun  7 11:21:39 2002
@@ -1080,12 +1080,21 @@
       base = 16;
       p = str + 2;
     }
-  /* The ISDIGIT check is so we are not confused by a suffix on 0.  */
-  else if (str[0] == '0' && ISDIGIT (str[1]))
-    {
-      base = 8;
-      p = str + 1;
-    }
+  else /* not hex */
+     {
+	/* '0b' or '0B' begin a binary number */
+	if (len > 2 && str[0] == '0' && (str[1] == 'b' || str[1] == 'B'))
+	   {
+	      base = 2;
+	      p = str + 2;
+	   }
+	/* The ISDIGIT check is so we are not confused by a suffix on 0.  */
+	else if (str[0] == '0' && ISDIGIT (str[1]))
+	   {
+	      base = 8;
+	      p = str + 1;
+	   }
+     }
 
   do
     {
diff -ur gcc-3.0.3-orig/gcc/cp/mangle.c gcc-3.0.3/gcc/cp/mangle.c
--- gcc-3.0.3-orig/gcc/cp/mangle.c	Mon Dec  3 09:38:50 2001
+++ gcc-3.0.3/gcc/cp/mangle.c	Fri Jun  7 11:24:02 2002
@@ -1552,6 +1552,17 @@
 		break;
 	      }
 	  
+	  if (type == intTI_type_node || type == widest_integer_literal_type_node)
+            {
+              write_char('n');
+              break;
+            }
+          else if (type == unsigned_intTI_type_node || type == widest_unsigned_literal_type_node)
+            {
+              write_char('o');
+	      break;
+            }
+
 	  if (itk == itk_none)
 	    {
 	      tree t = type_for_mode (TYPE_MODE (type), TREE_UNSIGNED (type));
diff -ur gcc-3.0.3-orig/gcc/final.c gcc-3.0.3/gcc/final.c
--- gcc-3.0.3-orig/gcc/final.c	Sun Nov 25 16:48:08 2001
+++ gcc-3.0.3/gcc/final.c	Fri Jun  7 11:24:02 2002
@@ -2551,6 +2551,8 @@
 	    /* Get out the operand values.  */
 	    string = decode_asm_operands (body, ops, NULL_PTR,
 					  NULL_PTR, NULL_PTR);
+					  
+	    check_asm_operands( body );
 	    /* Inhibit aborts on what would otherwise be compiler bugs.  */
 	    insn_noperands = noperands;
 	    this_is_asm_operands = insn;
@@ -3464,8 +3466,22 @@
 #endif
 
       case '%':
+	if (*p == 'A')
+	  {
+	    p++;
+	    c = atoi(p);
+	    if (! (*p >= '0' && *p <= '9'))
+	      output_operand_lossage ("alternative value missing");
+	    else if ( c > 9 )
+	      output_operand_lossage ("alternative value too large");
+	    else
+	      {
+		fputc( (which_alternative == c)?'1':'0', asm_out_file );
+	      }
+	    p++;
+	  }
 	/* %% outputs a single %.  */
-	if (*p == '%')
+	else if (*p == '%')
 	  {
 	    p++;
 	    putc (c, asm_out_file);
diff -ur gcc-3.0.3-orig/gcc/local-alloc.c gcc-3.0.3/gcc/local-alloc.c
--- gcc-3.0.3-orig/gcc/local-alloc.c	Thu Feb  1 17:03:47 2001
+++ gcc-3.0.3/gcc/local-alloc.c	Fri Jun  7 11:24:02 2002
@@ -2396,7 +2396,9 @@
   int reg_allowed = 0;
   int num_matching_alts = 0;
 
-  while ((c = *p++))
+  while ((c = *p++)
+	 && (c != ' ')
+	 && (c != '\t'))
     switch (c)
       {
       case '=':  case '+':  case '?':
diff -ur gcc-3.0.3-orig/gcc/recog.c gcc-3.0.3/gcc/recog.c
--- gcc-3.0.3-orig/gcc/recog.c	Wed Jul 11 18:38:09 2001
+++ gcc-3.0.3/gcc/recog.c	Fri Jun  7 11:24:02 2002
@@ -1685,7 +1685,9 @@
   if (reload_completed)
     abort ();
 
-  while (*constraint)
+  while (*constraint != ' '
+	 && *constraint != '\t'
+	 && *constraint != '\0')
     {
       char c = *constraint++;
       switch (c)
@@ -2281,6 +2283,10 @@
 		while (c != ',' && c != '\0');
 	      if (c == ',' || c == '\0')
 		break;
+	      /* stop if we've hit whitespace -- what follows is a name
+		 for this operand, not a constraint. */
+	      if (c == ' ' || c == '\t' )
+		break;
 
 	      switch (c)
 		{
@@ -2434,7 +2440,9 @@
 	  if (*p == 0 || *p == ',')
 	    win = 1;
 
-	  while (*p && (c = *p++) != ',')
+	  while (*p && (c = *p++) != ',') {
+	    if ( c == ' ' || c == '\t' )
+	      break;
 	    switch (c)
 	      {
 	      case '?':  case '!': case '*':  case '%':
@@ -2652,6 +2660,7 @@
 		  break;
 		}
 	      }
+	  }
 
 	  constraints[opno] = p;
 	  /* If this operand did not win somehow,
diff -ur gcc-3.0.3-orig/gcc/regclass.c gcc-3.0.3/gcc/regclass.c
--- gcc-3.0.3-orig/gcc/regclass.c	Fri Jul 20 17:31:32 2001
+++ gcc-3.0.3/gcc/regclass.c	Fri Jun  7 11:24:02 2002
@@ -1508,7 +1508,7 @@
 	     any of the constraints.  Collect the valid register classes
 	     and see if this operand accepts memory.  */
 
-	  while (*p && (c = *p++) != ',')
+	  while (*p && (c = *p++) != ',' && (c != ' ') && (c != '\t'))
 	    switch (c)
 	      {
 	      case '*':
diff -ur gcc-3.0.3-orig/gcc/reload.c gcc-3.0.3/gcc/reload.c
--- gcc-3.0.3-orig/gcc/reload.c	Sat Sep 29 14:51:19 2001
+++ gcc-3.0.3/gcc/reload.c	Fri Jun  7 11:24:02 2002
@@ -2507,7 +2507,7 @@
       /* Scan this operand's constraint to see if it is an output operand,
 	 an in-out operand, is commutative, or should match another.  */
 
-      while ((c = *p++))
+      while ((c = *p++) && (c != ' ') && (c != '\t'))
 	{
 	  if (c == '=')
 	    modified[i] = RELOAD_WRITE;
@@ -2864,7 +2864,7 @@
 	     or set WINREG if this operand could fit after reloads
 	     provided the constraint allows some registers.  */
 
-	  while (*p && (c = *p++) != ',')
+	  while (*p && (c = *p++) != ',' && (c != ' ') && (c != '\t'))
 	    switch (c)
 	      {
 	      case '=':  case '+':  case '*':
@@ -4192,7 +4192,7 @@
     }
   /* Scan the requested alternative for 'm' or 'o'.
      If one of them is present, this alternative accepts memory constants.  */
-  while ((c = *constraint++) && c != ',' && c != '#')
+  while ((c = *constraint++) && c != ',' && c != '#' && c != ' ' && c != '\t' )
     if (c == 'm' || c == 'o')
       return 1;
   return 0;
diff -ur gcc-3.0.3-orig/gcc/reload1.c gcc-3.0.3/gcc/reload1.c
--- gcc-3.0.3-orig/gcc/reload1.c	Mon Nov 19 14:04:30 2001
+++ gcc-3.0.3/gcc/reload1.c	Fri Jun  7 11:24:02 2002
@@ -1338,6 +1338,9 @@
 	    {
 	      char c = *p++;
 
+	      if (c == ' ' || c == '\t')
+		break;
+
 	      if (c == '\0' || c == ',' || c == '#')
 		{
 		  /* End of one alternative - mark the regs in the current
@@ -2533,6 +2536,14 @@
 	{
 	  new = SUBREG_REG (x);
 	}
+      else if (GET_CODE (SUBREG_REG (x)) == MEM
+	  && (GET_MODE_SIZE (GET_MODE (x))
+	      == GET_MODE_SIZE (GET_MODE (SUBREG_REG (x)))))
+	{
+	  new = gen_rtx_MEM (GET_MODE (x), XEXP(SUBREG_REG(x), 0));
+	  MEM_COPY_ATTRIBUTES (new, SUBREG_REG(x));
+	  return new;
+	}
       else
 	new = eliminate_regs (SUBREG_REG (x), mem_mode, insn);
 
@@ -8448,6 +8459,9 @@
 	    {
 	      char c = *p++;
 
+ 	      if (c == ' ' || c == '\t')
+ 		break;
+ 
 	      switch (c)
 		{
 		case '=':  case '+':  case '?':
diff -ur gcc-3.0.3-orig/gcc/stmt.c gcc-3.0.3/gcc/stmt.c
--- gcc-3.0.3-orig/gcc/stmt.c	Thu Dec 13 23:02:11 2001
+++ gcc-3.0.3/gcc/stmt.c	Fri Jun  7 11:24:02 2002
@@ -1299,6 +1299,192 @@
   last_expr_type = 0;
 }
 
+const char*
+get_asm_operand_name( const char* constraint )
+{
+   char* name = strchr(constraint, ' ');
+   if ( name != NULL ) {
+      /* find the name.. */
+      while( *name == ' ' || *name == '\t' ) name++;
+      if ( *name == '\0' )
+	 error("Syntax error!  A name must follow whitespace in a constraint!");
+   }
+}
+
+typedef struct {
+      const char* name;
+      char value[5];
+      int num_occurrences;
+      const char* next_sub;
+} name_def_entry;
+
+void
+find_asm_name_occurrences( name_def_entry* definition, const char* asm_text )
+{
+   static const char* max_char_ptr = (char*)0xffffffff;
+   int is_first_sub = 1;
+   const char* cursor;
+
+   /* count the number of times the name occurs in the asm */
+   definition->next_sub = (char*)max_char_ptr;
+   definition->num_occurrences = 0;
+   cursor = asm_text;
+   while ( cursor = strstr(cursor, definition->name) ) {
+      if ( is_first_sub ) {
+	 definition->next_sub = cursor;
+	 is_first_sub = 0;
+      }
+      definition->num_occurrences++;
+      cursor += strlen( definition->name );
+   }
+   if ( definition->num_occurrences == 0 )
+      warning("'%s' was not found in the asm text!", definition->name);
+}
+
+char*
+substitute_asm_operand_names( name_def_entry* name_defs, int num_definitions,
+			      const char* old_asm_text )
+{
+   static const char* max_char_ptr = (char*)0xffffffff;
+   char *new_asm_text, *new_cursor;
+   const char *old_cursor, *next_substitution;
+   name_def_entry* next_def_to_sub;
+   int asm_text_length = strlen( old_asm_text ) + 1; /* +1 for '\0' */
+
+   /* get the length of the new asm string */
+   int i;
+   int new_asm_text_length = asm_text_length;
+   for ( i = 0; i < num_definitions; i++ ) {
+      new_asm_text_length +=
+	 ( (strlen(name_defs[i].value) - strlen(name_defs[i].name))
+	   * name_defs[i].num_occurrences );
+   }
+   if ( new_asm_text_length < 0)
+      error( "something has gone horribly wrong "
+	     "while trying to substitute asm operand names..." );
+
+   new_asm_text = (char*)malloc( new_asm_text_length * sizeof(char) );
+
+   /* now copy the old asm string to the new while substituting. strategy is as follows: */
+   /* 1. find the next substitution for each definition (done above) */
+   /* 2. find the first of the substitutions */
+   /* 3. copy up to the first sub and substitute */
+   /* 4. find the next substitution of definition we just used */
+   /* 5. loop to 2 */
+   old_cursor = old_asm_text;
+   new_cursor = new_asm_text;
+   while ( 1 ) {
+      /* find the next substitution */
+      next_substitution = (char*)max_char_ptr;
+      for ( i = 0; i < num_definitions; i++ ) {
+	 if ( name_defs[i].next_sub < next_substitution ) {
+	    next_substitution = name_defs[i].next_sub;
+	    next_def_to_sub = &name_defs[i];
+	 }
+      }
+      /* are we finished? */
+      if ( next_substitution == (char*)max_char_ptr ) break;
+
+      if ( old_cursor > next_substitution )
+	 error("error while trying to substitute register names in `asm' text; are you sure "
+	       "one of your names isn't a substring of another?" );
+
+      /* copy up to the next sub */
+      while ( *old_cursor && old_cursor != next_substitution )
+	 *new_cursor++ = *old_cursor++;
+
+      /* substitute */
+      strcpy( new_cursor, next_def_to_sub->value );
+      new_cursor += strlen(next_def_to_sub->value);
+      old_cursor += strlen(next_def_to_sub->name);
+
+      /* now update the def we just substituted */
+      next_def_to_sub->next_sub = strstr( old_cursor, next_def_to_sub->name );
+      if ( next_def_to_sub->next_sub == NULL )
+	 next_def_to_sub->next_sub = (char*)max_char_ptr;
+   }
+
+   /* copy the rest of the asm (after the last sub) */
+   while ( *old_cursor ) *new_cursor++ = *old_cursor++;
+   *new_cursor = '\0';
+
+   return new_asm_text;
+}
+
+#define MAX_ASM_NAME_DEFS 20
+
+char*
+find_and_subst_asm_op_names( asm_text, inputs, outputs )
+  const char* asm_text;
+  tree inputs, outputs;
+{
+  int num_defs = 0, num_substitutions = 0;
+
+  /* a table to hold name definitions */
+  name_def_entry name_defs[MAX_ASM_NAME_DEFS], *cur_def = &name_defs[0];
+
+  int asm_text_length = strlen(asm_text) + 1;
+  char *new_asm_text = (char*)asm_text;
+  int new_asm_text_length = asm_text_length;
+  int cur_operand_num = 0;
+
+  tree cur_node;
+
+  /* first, check the outputs for name definitions */
+  for (cur_node = outputs; cur_node; cur_node = TREE_CHAIN(cur_node) ) {
+    char* constraint = TREE_STRING_POINTER (TREE_PURPOSE (cur_node));
+    int constraint_length = TREE_STRING_LENGTH (TREE_PURPOSE (cur_node)) - 1;
+    const char* name;
+
+    /* does this operand have a name associated with it? */
+    if ( constraint_length > 0
+	 && (name = get_asm_operand_name(constraint)) ) {
+      num_defs++;
+      cur_def->name = name;
+	 
+      /* set the value of this name to be '%<operand number>' */
+      sprintf(cur_def->value, "%%%d", cur_operand_num);
+
+      find_asm_name_occurrences( cur_def, asm_text );
+      num_substitutions += cur_def->num_occurrences;
+
+      cur_def++;
+    }
+
+    cur_operand_num++;
+  }
+
+  /* now check the inputs for name definitions */
+  for (cur_node = inputs; cur_node; cur_node = TREE_CHAIN(cur_node) ) {
+    char* constraint = TREE_STRING_POINTER (TREE_PURPOSE (cur_node));
+    int constraint_length = TREE_STRING_LENGTH (TREE_PURPOSE (cur_node)) - 1;
+    const char *name;
+
+    /* does this operand have a name associated with it? */
+    if ( constraint_length > 0
+	 && (name = get_asm_operand_name(constraint)) ) {
+      num_defs++;
+      cur_def->name = name;
+
+      /* set the value of this name to be '%<operand number>' */
+      sprintf(cur_def->value, "%%%d", cur_operand_num);
+
+      find_asm_name_occurrences( cur_def, asm_text );
+      num_substitutions += cur_def->num_occurrences;
+
+      cur_def++;
+    }
+
+    cur_operand_num++;
+  }
+
+  /* now we need to perform the substitutions */
+  if ( num_defs > 0 && num_substitutions > 0 )
+    new_asm_text = substitute_asm_operand_names( name_defs, num_defs, asm_text );
+
+  return new_asm_text;
+}
+
 /* Parse the output constraint pointed to by *CONSTRAINT_P.  It is the
    OPERAND_NUMth output operand, indexed from zero.  There are NINPUTS
    inputs and NOUTPUTS outputs to this extended-asm.  Upon return,
@@ -1325,6 +1511,8 @@
 {
   const char *constraint = *constraint_p;
   const char *p;
+  size_t constraint_len;
+  int j;
 
   /* Assume the constraint doesn't allow the use of either a register
      or memory.  */
@@ -1383,7 +1571,12 @@
     }
 
   /* Loop through the constraint string.  */
-  for (p = constraint + 1; *p; ++p)
+  constraint_len = strlen(constraint);
+  /* subtract the name of this constraint off of c_len */
+  constraint_len = (p = strchr(constraint, ' ')) ? (int)(p - constraint) : constraint_len;
+
+  for (j = 1; j < constraint_len; j++) {
+    p = &constraint[j];
     switch (*p)
       {
       case '+':
@@ -1448,6 +1641,7 @@
 #endif
 	break;
       }
+  }
 
   return true;
 }
@@ -1468,6 +1662,7 @@
 {
   const char *constraint = *constraint_p;
   const char *orig_constraint = constraint;
+  const char *p;
   size_t c_len = strlen (constraint);
   size_t j;
 
@@ -1478,6 +1673,9 @@
 
   /* Make sure constraint has neither `=', `+', nor '&'.  */
 
+  /* subtract the name of this constraint off of c_len */
+  c_len = (p = strchr(constraint, ' ')) ? (int)(p - constraint) : c_len;
+
   for (j = 0; j < c_len; j++)
     switch (constraint[j])
       {
@@ -1616,6 +1814,8 @@
   rtx insn;
   int old_generating_concat_p = generating_concat_p;
 
+  char *new_asm_string = find_and_subst_asm_op_names( TREE_STRING_POINTER(string), inputs, outputs );
+
   /* An ASM with no outputs needs to be treated as volatile, for now.  */
   if (noutputs == 0)
     vol = 1;
@@ -1818,9 +2018,13 @@
   argvec = rtvec_alloc (ninputs);
   constraints = rtvec_alloc (ninputs);
 
+  /* new_asm_string will be the same as TREE_STRING_POINTER(string) if
+     there were no substitutions performed in parse_name_definitions,
+     otherwise it will point to a new string generated for this function
+     (which is necessary for templates) */
   body = gen_rtx_ASM_OPERANDS ((noutputs == 0 ? VOIDmode
 				: GET_MODE (output_rtx[0])),
-			       TREE_STRING_POINTER (string), 
+			       new_asm_string, 
 			       empty_string, 0, argvec, constraints,
 			       filename, line);
 
@@ -1954,7 +2158,7 @@
 			   output_rtx[i],
 			   gen_rtx_ASM_OPERANDS
 			   (GET_MODE (output_rtx[i]),
-			    TREE_STRING_POINTER (string),
+			    new_asm_string,
 			    output_constraints[i],
 			    i, argvec, constraints,
 			    filename, line));
